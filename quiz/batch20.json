[
  {
    "question": "Which React pattern allows reusing component logic by wrapping a component?",
    "options": ["Render Props", "Higher-Order Component (HOC)", "Compound Components", "Custom Hook"],
    "answer": "Higher-Order Component (HOC)"
  },
  {
    "question": "Which React pattern involves passing a function as a prop to render content?",
    "options": ["HOC", "Render Props", "Compound Components", "Context API"],
    "answer": "Render Props"
  },
  {
    "question": "Which pattern allows multiple components to share an implicit state via a common parent?",
    "options": ["HOC", "Render Props", "Compound Components", "Context API"],
    "answer": "Compound Components"
  },
  {
    "question": "Which React feature allows creating reusable stateful logic without changing the component tree?",
    "options": ["Custom Hooks", "HOC", "Render Props", "Context API"],
    "answer": "Custom Hooks"
  },
  {
    "question": "Which React API allows rendering a component outside its parent DOM hierarchy?",
    "options": ["Portals", "Fragments", "Suspense", "StrictMode"],
    "answer": "Portals"
  },
  {
    "question": "Which React pattern is often used to add logging, authorization, or theming to components?",
    "options": ["Render Props", "HOC", "Compound Components", "Custom Hooks"],
    "answer": "HOC"
  },
  {
    "question": "Which React pattern can pass both state and callbacks to child components via function props?",
    "options": ["Render Props", "HOC", "Compound Components", "Context API"],
    "answer": "Render Props"
  },
  {
    "question": "Which React pattern helps to avoid prop drilling in component trees?",
    "options": ["Compound Components", "Context API", "HOC", "Render Props"],
    "answer": "Compound Components"
  },
  {
    "question": "Which hook allows sharing form handling logic across multiple components?",
    "options": ["Custom Hooks", "useEffect", "useContext", "useReducer"],
    "answer": "Custom Hooks"
  },
  {
    "question": "Which React API is used to render modals, tooltips, and dropdowns outside the DOM hierarchy?",
    "options": ["Portals", "Fragments", "StrictMode", "Suspense"],
    "answer": "Portals"
  },
  {
    "question": "Which pattern wraps a component to enhance its props or behavior without modifying its implementation?",
    "options": ["HOC", "Render Props", "Custom Hook", "Portal"],
    "answer": "HOC"
  },
  {
    "question": "Which pattern uses a function as a child to pass dynamic data to nested components?",
    "options": ["HOC", "Render Props", "Compound Components", "Custom Hook"],
    "answer": "Render Props"
  },
  {
    "question": "Which pattern allows a set of components to share common state implicitly?",
    "options": ["HOC", "Render Props", "Compound Components", "Context API"],
    "answer": "Compound Components"
  },
  {
    "question": "Which React feature allows logic reuse without wrapping components?",
    "options": ["Custom Hooks", "HOC", "Render Props", "Portals"],
    "answer": "Custom Hooks"
  },
  {
    "question": "Which React API enables rendering a child into a DOM node outside its parent tree?",
    "options": ["Portals", "Fragments", "Suspense", "StrictMode"],
    "answer": "Portals"
  },
  {
    "question": "Which pattern is useful for cross-cutting concerns like logging or analytics?",
    "options": ["HOC", "Render Props", "Compound Components", "Custom Hooks"],
    "answer": "HOC"
  },
  {
    "question": "Which pattern provides flexibility to render UI based on props passed to a function?",
    "options": ["Render Props", "HOC", "Compound Components", "Custom Hooks"],
    "answer": "Render Props"
  },
  {
    "question": "Which pattern is ideal for creating complex component APIs with subcomponents?",
    "options": ["Compound Components", "HOC", "Render Props", "Custom Hooks"],
    "answer": "Compound Components"
  },
  {
    "question": "Which hook allows logic extraction for data fetching, form handling, or animation?",
    "options": ["Custom Hooks", "useEffect", "useReducer", "useMemo"],
    "answer": "Custom Hooks"
  },
  {
    "question": "Which React API allows rendering outside the main DOM tree while preserving React state?",
    "options": ["Portals", "Fragments", "StrictMode", "Suspense"],
    "answer": "Portals"
  }
]
